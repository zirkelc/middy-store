service: middy-store-example-stepfunctions
frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-step-functions

custom:
  esbuild:
    platform: node
    format: esm
    outExtension: 
      '.js': '.mjs'
    banner:     
      js: "import {createRequire} from 'module'; const require = createRequire(import.meta.url)"
    bundle: true
    minify: false
    sourcemap: false

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 30
  environment:
    PAYLOAD_BUCKET: !Ref PayloadBucket
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource: 
            - "arn:aws:s3:::${self:service}-payload/*"
            - "arn:aws:s3:::${self:service}-payload"

functions:
  SingleGeneratePayload:
    handler: functions/single.generatePayloadHandler
  SinglePrintPayload:
    handler: functions/single.printPayloadHandler
  MultipleGeneratePayload:
    handler: functions/multiple.generatePayloadHandler    
  MultiplePrintPayload:
    handler: functions/multiple.printPayloadHandler    

stepFunctions:
  stateMachines:
    LargePayloadStateMachine:
      name: LargePayloadStateMachine
      definition:
        StartAt: Start
        States:
          Start:
            Type: Parallel
            End: true
            Branches:
              - StartAt: SingleGeneratePayload
                States:
                  SingleGeneratePayload:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [SingleGeneratePayload, Arn]
                    Next: SinglePrintPayload
                  SinglePrintPayload:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [SinglePrintPayload, Arn]            
                    End: true
              - StartAt: InitIterator
                States:
                  InitIterator:
                    Type: Pass
                    Result: 
                      count: 0
                    ResultPath: $.iterator
                    Next: MultipleGeneratePayload
                  MultipleGeneratePayload:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [MultipleGeneratePayload, Arn]
                    Next: IncrementIterator
                  IncrementIterator:
                    Type: Pass
                    Parameters: 
                      count.$: States.MathAdd($.iterator.count, 1)
                    ResultPath: $.iterator
                    Next: CheckIterator
                  CheckIterator:
                    Type: Choice
                    Choices:
                      - Variable: $.iterator.count
                        NumericLessThan: 5
                        Next: MultipleGeneratePayload
                    Default: MultiplePrintPayload
                  MultiplePrintPayload:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [MultiplePrintPayload, Arn]            
                    End: true
resources:
  Resources:
    PayloadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-payload